package higherkindness.compendiumtest

import cats.effect.{ExitCode, IO, IOApp}
import higherkindness.compendiumtest.compendium._
import io.chrisdavenport.log4cats.SelfAwareStructuredLogger
import io.chrisdavenport.log4cats.slf4j.Slf4jLogger
import Decoder._
import SearchOps._

object Main extends IOApp {

  implicit val logger: SelfAwareStructuredLogger[IO] =
    Slf4jLogger.getLogger

  override def run(args: List[String]): IO[ExitCode] = {
    {
      for {
        _ <- logger.info(
          "Start reading the csv files. Data automatically generated by Mockaroo."
        )
        prods <- read[Product, IO]("/product.csv")
        _ <- logger.info("Product first value:" + prods.headOption)
        suppls <- read[Supplier, IO]("/supplier.csv")
        _ <- logger.info("Supplier first value:" + suppls.headOption)
        _ <- logger.info(
          s"Lets find a client that bought #${prods(12).id_prod} product."
        )
        res <- SearchOps[IO].FindClients(prods(12))
        _ <- logger.info("This is what I found: " + res)
        _ <- logger.info("Bye!")
      } yield ()
    }.attempt.map(_.fold({ e =>
      logger.error("There was an error: " + e.getMessage); ExitCode.Error
    }, _ => ExitCode.Success))
  }
}
